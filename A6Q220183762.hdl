CHIP A6Q2201837629 {
    IN a, b, c, d;
    OUT f;

    PARTS:
    Not(in=a, out=nota);
    Not(in=b, out=notb);
    Not(in=c, out=notc);
    Not(in=d, out=notd);

    // Term 1: (~a ∧ ~b ∧ ~c ∧ ~d)
    And(a=nota, b=notb, out=and1);
    And(a=and1, b=notc, out=and2);
    And(a=and2, b=notd, out=term1);

    // Term 2: (~a ∧ ~b ∧ c ∧ d)
    And(a=nota, b=notb, out=and3);
    And(a=and3, b=c, out=and4);
    And(a=and4, b=d, out=term2);

    // Term 3: (~a ∧ b ∧ ~c ∧ ~d)
    And(a=nota, b=b, out=and5);
    And(a=and5, b=notc, out=and6);
    And(a=and6, b=notd, out=term3);

    // Term 4: (~a ∧ b ∧ c ∧ d)
    And(a=nota, b=b, out=and7);
    And(a=and7, b=c, out=and8);
    And(a=and8, b=d, out=term4);

    // Combine terms 1-4
    Or(a=term1, b=term2, out=or1);
    Or(a=term3, b=term4, out=or2);
    Or(a=or1, b=or2, out=part1);

    // Term 5: (a ∧ ~b ∧ ~c ∧ ~d)
    And(a=a, b=notb, out=and9);
    And(a=and9, b=notc, out=and10);
    And(a=and10, b=notd, out=term5);

    // Term 6: (a ∧ b ∧ c ∧ ~d)
    And(a=a, b=b, out=and11);
    And(a=and11, b=c, out=and12);
    And(a=and12, b=notd, out=term6);

    // Combine terms 5 and 6, then all parts
    Or(a=term5, b=term6, out=part2);
    Or(a=part1, b=part2, out=f);
}