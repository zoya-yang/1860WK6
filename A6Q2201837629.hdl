CHIP A6Q2201837629 {
    IN a, b, c, d;
    OUT f, debug_term1, debug_term2, debug_term3, debug_part1, debug_part2;

    PARTS:
    // Step 1: Negate inputs
    NOT(in=a, out=Nota);
    NOT(in=b, out=Notb);
    NOT(in=c, out=Notc);
    NOT(in=d, out=Notd);

    // Step 2: Compute intermediate terms
    AND(a=Nota, b=d, out=debug_term1);     // ¬a ∧ d
    AND(a=Nota, b=c, out=debug_term2);     // ¬a ∧ c
    AND(a=a, b=d, out=debug_term3);        // a ∧ d
    AND(a=a, b=c, out=term4);              // a ∧ c

    OR(a=debug_term1, b=debug_term2, out=debug_part1); // ¬a ∧ d ∨ ¬a ∧ c
    OR(a=debug_term3, b=term4, out=debug_part2);       // a ∧ d ∨ a ∧ c

    OR(a=debug_part1, b=debug_part2, out=partial3);    // Combine all intermediate results
    AND(a=Notb, b=partial3, out=part4);                // ¬b ∧ (...)

    // Step 3: Compute last term (a ∧ b ∧ ¬c ∧ ¬d)
    AND(a=a, b=b, out=ab);
    AND(a=ab, b=Notc, out=abc);
    AND(a=abc, b=Notd, out=term5);                     // a ∧ b ∧ ¬c ∧ ¬d

    // Step 4: Combine results
    OR(a=part4, b=term5, out=f);                       // Final output
}