CHIP A6Q2201837629 {
    IN a, b, c, d;  // Inputs: 4-bit binary
    OUT f;          // Output: Function f

    PARTS:
    // NOT gates for negations
    Not(in=a, out=NotA);
    Not(in=b, out=NotB);
    Not(in=c, out=NotC);
    Not(in=d, out=NotD);

    // AND gates for each minterm
    And(a=NotA, b=NotB, c=NotC, d=d, out=M1);  // Minterm 1: ¬a ∧ ¬b ∧ ¬c ∧ d
    And(a=NotA, b=NotB, c=c, d=NotD, out=M2);  // Minterm 2: ¬a ∧ ¬b ∧ c ∧ ¬d
    And(a=NotA, b=NotB, c=c, d=d, out=M3);     // Minterm 3: ¬a ∧ ¬b ∧ c ∧ d
    And(a=a, b=NotB, c=NotC, d=d, out=M9);     // Minterm 9: a ∧ ¬b ∧ ¬c ∧ d
    And(a=a, b=NotB, c=c, d=NotD, out=M10);    // Minterm 10: a ∧ ¬b ∧ c ∧ ¬d
    And(a=a, b=b, c=NotC, d=NotD, out=M12);    // Minterm 12: a ∧ b ∧ ¬c ∧ ¬d

    // OR gates to combine all minterms
    Or(a=M1, b=M2, out=Partial1);
    Or(a=Partial1, b=M3, out=Partial2);
    Or(a=Partial2, b=M9, out=Partial3);
    Or(a=Partial3, b=M10, out=Partial4);
    Or(a=Partial4, b=M12, out=f);  // Final output
}